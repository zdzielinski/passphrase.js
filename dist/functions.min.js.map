{"version":3,"file":"functions.min.js","mappings":"qBAAA,SAASA,EAAsBC,GAC7B,OAAOA,EAAEC,KAAKC,MAAMD,KAAKE,SAAWH,EAAEI,QACxC,CAEA,SAASC,EAAsBL,GAC7B,OAAOA,EACHM,OAAOC,gBAAgB,IAAIC,YAAY,IAAI,GAAK,GAAK,GAAMR,EAAEI,OAAU,EAE7E,CAEA,SAASK,EAAeL,EAAQM,EAAOC,EAAWC,GAChD,IAAIC,EAAa,GAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAQU,IAC1BD,GAAcD,EAAeF,GAASC,EAGxC,OAAOE,EAAWE,MAAM,GAAIJ,EAAUP,OACxC,CA8BAY,EAAOC,QAAU,CAAEC,oBAlBnB,SAA6Bd,EAAQM,EAAOC,EAAY,KACtD,OAAOF,EAAeL,EAAQM,EAAOC,EAAWZ,EAClD,EAgBwCoB,oBAJxC,SAA6Bf,EAAQM,EAAOC,EAAY,KACtD,OAAOF,EAAeL,EAAQM,EAAOC,EAAWN,EAClD,E,GC7CIe,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaP,QAGrB,IAAID,EAASI,EAAyBG,GAAY,CAGjDN,QAAS,CAAC,GAOX,OAHAS,EAAoBH,GAAUP,EAAQA,EAAOC,QAASK,GAG/CN,EAAOC,OACf,CCnB0BK,CAAoB,K","sources":["webpack://passphrase/./src/functions.js","webpack://passphrase/webpack/bootstrap","webpack://passphrase/webpack/startup"],"sourcesContent":["function _getRandArrElemNormal(a) {\n  return a[Math.floor(Math.random() * a.length)];\n}\n\nfunction _getRandArrElemCrypto(a) {\n  return a[\n    ((crypto.getRandomValues(new Uint32Array(1))[0] / 2 ** 32) * a.length) | 0\n  ];\n}\n\nfunction _genPassPhrase(length, words, separator, getRandArrElem) {\n  let passPhrase = \"\";\n\n  for (let i = 0; i < length; i++) {\n    passPhrase += getRandArrElem(words) + separator;\n  }\n\n  return passPhrase.slice(0, -separator.length);\n}\n\n/**\n * Generate a passphrase in a non cryptographically secure way\n * Uses Math.random for random number generation\n *\n * @param {number} length The length of the passphrase (in words)\n * @param {array} words The list of words to use for generation\n * @param {string} separator The separator to use\n *\n * @returns {string} The generated passphrase\n */\nfunction genPassPhraseNormal(length, words, separator = \" \") {\n  return _genPassPhrase(length, words, separator, _getRandArrElemNormal);\n}\n\n/**\n * Generate a passphrase in a cryptographically secure way\n * Uses crypto.getRandomValues for random number generation\n *\n * @param {number} length The length of the passphrase (in words)\n * @param {array} words The list of words to use for generation\n * @param {string} separator The separator to use\n *\n * @returns {string} The generated passphrase\n */\nfunction genPassPhraseCrypto(length, words, separator = \" \") {\n  return _genPassPhrase(length, words, separator, _getRandArrElemCrypto);\n}\n\nmodule.exports = { genPassPhraseNormal, genPassPhraseCrypto };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(717);\n"],"names":["_getRandArrElemNormal","a","Math","floor","random","length","_getRandArrElemCrypto","crypto","getRandomValues","Uint32Array","_genPassPhrase","words","separator","getRandArrElem","passPhrase","i","slice","module","exports","genPassPhraseNormal","genPassPhraseCrypto","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}